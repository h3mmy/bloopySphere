---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: rook-ceph-cluster
  namespace: rook-ceph
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.rook.io/release
      chart: rook-ceph-cluster
      version: v1.17.5
      sourceRef:
        kind: HelmRepository
        name: rook-ceph-charts
        namespace: flux-system
  install:
    remediation:
      retries: 7
    # crds: CreateReplace
  upgrade:
    remediation:
      retries: 7
      remediateLastFailure: false # remediate the last failure, when no retries remain
    # crds: CreateReplace
  values:
    monitoring:
      createPrometheusRules: true
      enabled: true
    ingress:
      ingressClassName: traefik
      dashboard:
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/instance: "bloop-quarky"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Rook"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        host:
          name: "rook.${XYZ_DOMAIN}"
          path: "/"
        tls:
          - secretName: tls.rook
            hosts:
              - "rook.${XYZ_DOMAIN}"
    cephClusterSpec:
      cephConfig:
        global:
          bdev_enable_discard: "true" # quote
          bdev_async_discard_threads: "1" # quote
          osd_class_update_on_start: "false" # quote
          #device_failure_prediction_mode: local # requires mgr module
      # continueUpgradeAfterChecksEvenIfNotHealthy: true
      cephVersion:
        image: quay.io/ceph/ceph:v19.2.2

      csi:
        readAffinity:
          enabled: true

      healthCheck:
        daemonHealth:
          mon:
            disabled: false
            interval: 60s
        livenessProbe:
          mon:
            probe:
              timeoutSeconds: 10
          mgr:
            probe:
              timeoutSeconds: 10
          osd:
            probe:
              timeoutSeconds: 5
        startupProbe:
          mon:
            probe:
              timeoutSeconds: 10
          mgr:
            probe:
              timeoutSeconds: 10
          osd:
            probe:
              timeoutSeconds: 5
      mgr:
        count: 1
        modules:
          #- name: diskprediction_local
           # enabled: true
          - name: rook
            enabled: true
          - name: pg_autoscaler
            enabled: true
          - name: insights
            enabled: true

      placement:
        all:
          tolerations:
            - effect: NoSchedule
              operator: Exists
            - effect: NoExecute
              operator: Exists

      resources:
        mgr:
          requests:
            # @default cpu 600m
            cpu: 200m
            memory: 200Mi
        mgr-sidecar:
          # @default cpu 600m
          requests:
            cpu: 50m
            memory: 50Mi
        mon:
          requests:
            # @default cpu 1000m
            cpu: 100m
            memory: 256Mi
        osd:
          requests:
            # @default cpu 3000m
            cpu: 650m
            memory: 1Gi
        prepareosd:
          requests:
            # @default cpu 3000m
            cpu: 200m
            memory: 50Mi
        crashcollector:
          requests:
            cpu: 50m
            memory: 50Mi

      dashboard:
        enabled: true
        urlPrefix: /
        ssl: false

      mon:
        count: 3

      storage:
        useAllNodes: false
        useAllDevices: false
        config:
          osdsPerDevice: "1"
        nodes:
          - name: "${NODE_0_NAME}"
            devices:
              - name: "${NODE_0_DEVICE_0}"
              - name: "${NODE_0_DEVICE_1}"
          - name: "${NODE_1_NAME}"
            devices:
              - name: "${NODE_1_DEVICE_0}"
          - name: "${NODE_2_NAME}"
            devices:
              - name: "${NODE_2_DEVICE_0}"
        # The section for configuring management of daemon disruptions during upgrade or fencing.
      disruptionManagement:
        # If true, the operator will create and manage PodDisruptionBudgets for OSD, Mon, RGW, and MDS daemons. OSD PDBs are managed dynamically
        # via the strategy outlined in the [design](https://github.com/rook/rook/blob/master/design/ceph/ceph-managed-disruptionbudgets.md). The operator will
        # block eviction of OSDs by default and unblock them safely when drains are detected.
        managePodBudgets: true
        # A duration in minutes that determines how long an entire failureDomain like `region/zone/host` will be held in `noout` (in addition to the
        # default DOWN/OUT interval) when it is draining. This is only relevant when  `managePodBudgets` is `true`. The default value is `30` minutes.
        osdMaintenanceTimeout: 40
        # A duration in minutes that the operator will wait for the placement groups to become healthy (active+clean) after a drain was completed and OSDs came back up.
        # Operator will continue with the next drain if the timeout exceeds. It only works if `managePodBudgets` is `true`.
        # No values or 0 means that the operator will wait until the placement groups are healthy before unblocking the next drain.
        pgHealthCheckTimeout: 0
        # If true, the operator will create and manage MachineDisruptionBudgets to ensure OSDs are only fenced when the cluster is healthy.
        # Only available on OpenShift.
        manageMachineDisruptionBudgets: false
        # Namespace in which to watch for the MachineDisruptionBudgets.
        machineDisruptionBudgetNamespace: openshift-machine-api

    cephBlockPools:
      - name: ceph-blockpool
        spec:
          failureDomain: host
          replicated:
            size: 3
        storageClass:
          enabled: true
          name: ceph-block
          isDefault: true
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          parameters:
            imageFormat: "2"
            imageFeatures: layering
            # imageFeatures: "layering,exclusive-lock,object-map,fast-diff,deep-flatten" # https://docs.ceph.com/en/quincy/rbd/rbd-config-ref/#image-features
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
            csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
            csi.storage.k8s.io/fstype: ext4
    cephBlockPoolVolumeSnapshotClass:
      enabled: true
      name: csi-ceph-blockpool
      isDefault: false
      deletionPolicy: Delete
    cephFileSystems:
      []
      #- name: ceph-filesystem
      #  spec:
      #    metadataPool:
      #      replicated:
      #        size: 1
      #    dataPools:
      #      - failureDomain: host
      #        replicated:
      #          size: 1
      #    metadataServer:
      #      activeCount: 1
      #      activeStandby: true
      #  storageClass:
      #    enabled: true
      #    isDefault: false
      #    name: ceph-filesystem
      #    reclaimPolicy: Delete
      #    allowVolumeExpansion: true
      #    mountOptions: []
      #    parameters:
      #      csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
      #      csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
      #      csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
      #      csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
      #      csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
      #      csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
      #      csi.storage.k8s.io/fstype: ext4
    #cephObjectStores: []
    cephObjectStores:
      - name: ceph-objectstore
        spec:
          metadataPool:
            failureDomain: host
            replicated:
              size: 3
          dataPool:
            failureDomain: host
            erasureCoded:
              dataChunks: 2
              codingChunks: 1
          preservePoolsOnDelete: true
          gateway:
            port: 80
            resources:
              requests:
                cpu: 1000m
                memory: 1Gi
              limits:
                memory: 5Gi
            instances: 1
          healthCheck:
            bucket:
              interval: 60s
        storageClass:
          enabled: true
          name: ceph-bucket
          reclaimPolicy: Delete
          parameters:
            region: us-east-1
