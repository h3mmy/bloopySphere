---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: radarr
  namespace: media
spec:
  interval: 30m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s.github.io/helm-charts/
      chart: app-template
      version: 2.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
      remediateLastFailure: true
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
  values:
    controllers:
      main:
        type: statefulset
        containers:
          main:
            image:
              repository: ghcr.io/home-operations/radarr
              tag: 5.19.3.9730@sha256:dd64f1786f50ae79013822ce196e3e7bd20db369bd51d63d63c42f7821b77317
              pullPolicy: IfNotPresent
            env:
              # https://github.com/Radarr/Radarr/issues/7030#issuecomment-1039689518
              # https://github.com/dotnet/runtime/issues/9336
              COMPlus_EnableDiagnostics: "0"
              TZ: "${TZ}"
              PGID: "${MEDIA_GID}"
              RADARR__PORT: &port 7878
              RADARR__APPLICATION_URL: https://radarr.${XYZ_DOMAIN}
              RADARR__API_KEY: ${RADARR_API_KEY}
              RADARR__AUTHENTICATION_METHOD: External
              RADARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              RADARR__THEME: dark
            securityContext:
              runAsUser: 0
              runAsGroup: 0
            resources:
              requests:
                memory: 327M
                cpu: 100m
              limits:
                memory: 1500Mi
        pod:
          securityContext:
            fsGroup: "${MEDIA_GID}"
            fsGroupChangePolicy: "OnRootMismatch"
            supplementalGroups:
              - 100
              # Custom Camelus Group(s)
              - 65541
              - 65536
              - 65537
    service:
      main:
        ports:
          http:
            port: *port
    ingress:
      main:
        enabled: true
        className: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/icon: "filmstrip"
          hajimari.io/instance: "bloop-quarky"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.priority: "99"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-bloopnet-xyz-auth@kubernetescrd"
        hosts:
          - host: &host "radarr.${XYZ_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: *port
        tls:
          - secretName: tls.radarr
            hosts:
              - *host

    persistence:
      config:
        enabled: true
        existingClaim: radarr-config-v1
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDRESS}"
            path: /volume3/Data
        globalMounts:
          - path: /Data
            readOnly: false
      media-2:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDRESS}"
            path: /volume1/Data2
        globalMounts:
          - path: /Data2
            readOnly: false
      backup:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDRESS}"
            path: /volume3/Data/Backups/app/radarr
        globalMounts:
          - path: /config/Backups
            readOnly: false
