---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: sonarr-uhd
  namespace: media
spec:
  interval: 20m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s.github.io/helm-charts/
      chart: app-template
      version: 2.4.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  install:
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
      remediateLastFailure: true
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
  values:
    controllers:
      main:
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          main:
            image:
              repository: ghcr.io/onedr0p/sonarr-develop
              tag: 4.0.4.1668@sha256:0b89ee847f0b7e782386be22f964de18046e828c47d0d34eba5b3651c361eaa4
              pullPolicy: IfNotPresent

            env:
              TZ: "${TZ}"
              PGID: "${MEDIA_GID}"
              SONARR__AUTHENTICATION_METHOD: External
              SONARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              PUID: ${SONARR_PUID}
              SONARR__PORT: &port 80
              SONARR__APPLICATION_URL: https://sonarr-uhd.${XYZ_DOMAIN}
              SONARR__API_KEY: ${SONARR_UHD_API_KEY}

            securityContext:
              runAsUser: 0
              runAsGroup: 0

            resources:
              requests:
                memory: 250Mi
                cpu: 100m
              limits:
                memory: 1500Mi
        pod:
          securityContext:
            fsGroup: "${MEDIA_GID}"
            fsGroupChangePolicy: "OnRootMismatch"
            supplementalGroups:
              - 568
              - 100
              # Custom Camelus Group(s)
              - 65541
              - 65536
              - 65537

    service:
      main:
        ports:
          http:
            port: *port

    ingress:
      main:
        enabled: true
        className: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/icon: "television-classic"
          hajimari.io/instance: "bloop-quarky"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.priority: "99"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-bloopnet-xyz-auth@kubernetescrd"
        hosts:
          - host: &host "sonarr-uhd.${XYZ_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: *port
        tls:
          - secretName: tls.sonarr-uhd
            hosts:
              - *host

    persistence:
      config:
        enabled: true
        existingClaim: sonarr-uhd-config-v1
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDRESS}"
            path: /volume3/Data
        globalMounts:
          - path: /Data
            readOnly: false
      media-2:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDRESS}"
            path: /volume1/Data2
        globalMounts:
          - path: /Data2
            readOnly: false
      backup:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDRESS}"
            path: /volume3/Data/Backups/app/sonarr-uhd
        globalMounts:
          - path: /config/Backups
            readOnly: false
