---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 34.8.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  timeout: 20m
  install:
    crds: CreateReplace
    disableWait: true
    remediation:
      retries: 7
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 7
  values:
    fullnameOverride: prometheus
    alertmanager:
      config:
        global:
          slack_api_url: "${DISCORD_ALERT_MANAGER_URL}/slack"
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "discord"
            slack_configs:
              - channel: "${DISCORD_ALERTS_CHANNEL}"
                icon_url: "${PROMETHEUS_PROFILE_IMG_URL}"
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              matchers:
                - "alertname=Watchdog"
            - receiver: "discord"
              matchers:
                - "severity=critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - "severity=critical"
          - target_matchers:
              - "severity=warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          hajimari.io/instance: "bloop-quarky"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Alert Manager"
        hosts:
          - "alert-manager.${XYZ_DOMAIN}"
        tls:
          - hosts:
              - "{{ (index .Values.alertmanager.ingress.hosts 0) }}"
            secretName: "tls.alert-manager"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "nfs-client"
              resources:
                requests:
                  storage: 1Gi
    nodeExporter:
      enabled: true
      serviceMonitor:
        https: false
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 60
              preference:
                matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - i386
                      - i686
                      - x86
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      tolerations:
        - effect: "NoExecute"
          operator: "Exists"
        - effect: "NoSchedule"
          operator: "Exists"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    coreDns:
      enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: false
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: false
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    prometheusOperator:
      createCustomResource: true
      prometheusConfigReloader:
        resources:
          limits:
            cpu: 200m
    admissionWebhooks:
      certManager:
        enabled: true
    prometheus:
      enabled: true
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          hajimari.io/instance: "bloop-quarky"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Prometheus"
        hosts:
          - "prometheus.${XYZ_DOMAIN}"
        tls:
          - hosts:
              - "{{ (index .Values.prometheus.ingress.hosts 0) }}"
            secretName: tls.prometheus

      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true

      prometheusSpec:
        replicas: 2
        replicaExternalLabelName: "replica"
        ruleSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true

        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "ceph-block"
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.25.2
          version: v0.24.0
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml

        resources:
          requests:
            memory: 2000Mi
            cpu: 250m
          limits:
            memory: 4000Mi

        addtionalScrapeConfigs:
          - job_name: minio-job
            honor_timestamps: true
            metrics_path: /minio/v2/metrics/cluster
            static_configs:
              - targets:
                  - "minio.storage.svc.cluster.local:9000"
          - job_name: 'blocky'
            honor_timestamps: true
            static_configs:
              - targets:
                  - "blocky.networking.svc.cluster.local:4000"
          - job_name: 'uptimerobot'
            params:
              script: [uptimerobot]
            static_configs:
              - targets:
                  - "uptimerobot-prometheus.monitoring.svc.cluster.local:9705"
            scrape_interval: 5m
            scrape_timeout: 90s
          - job_name: "coredns"
            honor_timestamps: true
            static_configs:
              - targets:
                  - "kube-dns.kube-system:9153"
          - job_name: "jupyterhub"
            scrape_interval: 5m
            scrape_timeout: 90s
            honor_timestamps: true
            metrics_path: /metrics
            static_configs:
              - targets:
                  - "proxy-api.svc.cluster.local:8001"
          - job_name: "hass"
            scrape_interval: 60s
            metrics_path: /api/prometheus
            honor_timestamps: true
            # Long-Lived Access Token
            authorization:
              credentials: "${HASS_PROM_TOKEN}"
            # scheme: https
            static_configs:
              - targets: ['${HASS_DIRECT}:8123']
              # - targets: ['home-assistant.${CLASSIC_DOMAIN}:443']
