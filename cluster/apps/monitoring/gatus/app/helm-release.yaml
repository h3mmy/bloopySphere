---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app gatus
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      gatus:
        annotations:
          reloader.stakater.com/auto: "true"
          # https://github.com/prometheus-community/pro-bing#linux
          security.alpha.kubernetes.io/sysctls: net.ipv4.ping_group_range=0 2147483647
        initContainers:
          #init-db:
          #  image:
          #    repository: ghcr.io/home-operations/postgres-init
          #    tag: 16
          #  envFrom: &envFrom
          #    - secretRef:
          #        name: gatus-secret
          #  env:
          #    INIT_POSTGRES_DBNAME: *app
          #    INIT_POSTGRES_HOST: &pghost bloopgres-rw.database.svc.cluster.local
          # TODO: Convert this to a proper 'sidecar' container someday
          init-config:
            dependsOn: init-db
            image: &configSyncImage
              repository: ghcr.io/kiwigrid/k8s-sidecar
              tag: 1.28.4@sha256:20caf4e241e1f9f9231527db5e75b735aa7b0da7bee3d262cbe369bb9b33469f
            env: &configSyncEnv
              FOLDER: /config
              LABEL: gatus.io/enabled
              NAMESPACE: ALL
              RESOURCE: both
              UNIQUE_FILENAMES: true
              METHOD: LIST
            resources: &resources
              requests:
                cpu: 10m
              limits:
                memory: 128Mi
        containers:
          app:
            image:
              repository: twinproduction/gatus
              #tag: experimental
              tag: v5.17.0@sha256:a8c53f9e9f1a3876cd00e44a42c80fc984e118d5ba0bdbaf08980cb627d61512
            env:
          #    INIT_POSTGRES_DBNAME: *app
          #    INIT_POSTGRES_HOST: *pghost
              TZ: ${TZ}
              GATUS_CONFIG_PATH: /config
              CUSTOM_WEB_PORT: &port 80
              XYZ_DOMAIN: ${XYZ_DOMAIN}
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: &path /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop: [ALL]
            resources: *resources
          config-sync:
            image: *configSyncImage
            env:
              <<: *configSyncEnv
              METHOD: WATCH
            securityContext: *securityContext
            resources: *resources
        pod:
          dnsConfig:
            options:
              - { name: ndots, value: "1" }
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            runAsNonRoot: true
            fsGroup: 568
            fsGroupChangePolicy: OnRootMismatch
    service:
      app:
        controller: *app
        ipFamilyPolicy: PreferDualStack
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        serviceName: *app
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
    serviceAccount:
      create: true
      name: *app
    persistence:
      data:
        type: existingClaim
        name: gatus-data-v1
        globalMounts:
          - path: /data
      config:
        type: emptyDir
      config-file:
        type: configMap
        name: gatus-configmap
        globalMounts:
          - path: /config/config.yaml
            subPath: config.yaml
            readOnly: true
    ingress:
      main:
        enabled: true
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: networking-chain-no-auth@kubernetescrd
          traefik.ingress.kubernetes.io/affinity: "true"
          gatus.io/enabled: "true"
          gatus.io/path: *path
          hajimari.io/icon: simple-icons:statuspage
          hajimari.io/url: https://status.${XYZ_DOMAIN}
          # external-dns.alpha.kubernetes.io/target: external.${XYZ_DOMAIN}
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Observability
          gethomepage.dev/name: Gatus
          gethomepage.dev/icon: gatus.png
        hosts:
          - host: &host status.${XYZ_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
        tls:
          - hosts:
              - *host
