# Template and values from https://github.com/prometheus/snmp_exporter/blob/v0.21.0/generator/generator.yml
modules:
  # Synology
  #
  # Synology MIBs can be found here:
  #   http://www.synology.com/support/snmp_mib.php
  #   http://dedl.synology.com/download/Document/MIBGuide/Synology_MIB_File.zip
  #
  synology:  # The module name. You can have as many modules as you want.
    walk:       # List of OIDs to walk. Can also be SNMP object names or specific instances.
      - interfaces
      - sysUpTime
      - ifXTable
      - laNames
      - laLoadInt
      - ssCpuUser
      - ssCpuSystem
      - ssCpuIdle
      - memory
      - hrStorage
      - 1.3.6.1.4.1.6574.1       # synoSystem
      - 1.3.6.1.4.1.6574.2       # synoDisk
      - 1.3.6.1.4.1.6574.3       # synoRaid
      # - 1.3.6.1.4.1.6574.4       # synoUPS
      - 1.3.6.1.4.1.6574.5       # synologyDiskSMART
      - 1.3.6.1.4.1.6574.6       # synologyService
      - 1.3.6.1.4.1.6574.101     # storageIO
      - 1.3.6.1.4.1.6574.102     # spaceIO
      - 1.3.6.1.4.1.6574.104     # synologyiSCSILUN

    version: 3  # SNMP version to use. Defaults to 2.
                # 1 will use GETNEXT, 2 and 3 use GETBULK.
    max_repetitions: 25  # How many objects to request with GET/GETBULK, defaults to 25.
                         # May need to be reduced for buggy devices.
    retries: 3   # How many times to retry a failed request, defaults to 3.
    timeout: 5s  # Timeout for each individual SNMP request, defaults to 5s.

    auth:
      # Community string is used with SNMP v1 and v2. Defaults to "public".
      community: synology

      # v3 has different and more complex settings.
      # Which are required depends on the security_level.
      # The equivalent options on NetSNMP commands like snmpbulkwalk
      # and snmpget are also listed. See snmpcmd(1).
      username: ${SYNO_SNMP_USER}  # Required, no default. -u option to NetSNMP.
      security_level: authNoPriv  # Defaults to noAuthNoPriv. -l option to NetSNMP.
                                    # Can be noAuthNoPriv, authNoPriv or authPriv.
      password: ${SYNO_SNMP_PASS}  # Has no default. Also known as authKey, -A option to NetSNMP.
                      # Required if security_level is authNoPriv or authPriv.
      auth_protocol: SHA  # MD5, SHA, SHA224, SHA256, SHA384, or SHA512. Defaults to MD5. -a option to NetSNMP.
                          # Used if security_level is authNoPriv or authPriv.
      priv_protocol: DES  # DES, AES, AES192, or AES256. Defaults to DES. -x option to NetSNMP.
                          # Used if security_level is authPriv.
      priv_password: otherPass # Has no default. Also known as privKey, -X option to NetSNMP.
                               # Required if security_level is authPriv.
      context_name: context # Has no default. -n option to NetSNMP.
                            # Required if context is configured on the device.

    lookups:  # Optional list of lookups to perform.
              # The default for `keep_source_indexes` is false. Indexes must be unique for this option to be used.
      - source_indexes: [spaceIOIndex]
        lookup: spaceIODevice
        drop_source_indexes: true
      - source_indexes: [storageIOIndex]
        lookup: storageIODevice
        drop_source_indexes: true
      - source_indexes: [serviceInfoIndex]
        lookup: serviceName
        drop_source_indexes: true
      - source_indexes: [ifIndex]
        # Use OID to avoid conflict with Netscaler NS-ROOT-MIB.
        lookup: 1.3.6.1.2.1.31.1.1.1.1 # ifName
        drop_source_indexes: true
      - source_indexes: [diskIndex]
        lookup: diskID
        drop_source_indexes: true
      - source_indexes: [raidIndex]
        lookup: raidName
        drop_source_indexes: true
      - source_indexes: [laIndex]
        lookup: laNames
        drop_source_indexes: true
      - source_indexes: [hrStorageIndex]
        lookup: hrStorageDescr
        drop_source_indexes: true

      # It is also possible to chain lookups or use multiple labels to gather label values.
      # This might be helpful to resolve multiple index labels to a proper human readable label.
      # Please be aware that ordering matters here.

    overrides: # Allows for per-module overrides of bits of MIBs
      diskModel:
        type: DisplayString
      diskSMARTAttrName:
        type: DisplayString
      diskSMARTAttrStatus:
        type: DisplayString
      diskSMARTInfoDevName:
        type: DisplayString
      diskType:
        type: DisplayString
      ifType:
        type: EnumAsInfo
      modelName:
        type: DisplayString
      raidFreeSize:
        type: gauge
      raidName:
        type: DisplayString
      raidTotalSize:
        type: gauge
      serialNumber:
        type: DisplayString
      serviceName:
        type: DisplayString
      version:
        type: DisplayString
      #  metricName:
      #    ignore: true # Drops the metric from the output.
      #    regex_extracts:
      #      Temp: # A new metric will be created appending this to the metricName to become metricNameTemp.
      #        - regex: '(.*)' # Regex to extract a value from the returned SNMP walks's value.
      #          value: '$1' # The result will be parsed as a float64, defaults to $1.
      #      Status:
      #        - regex: '.*Example'
      #          value: '1' # The first entry whose regex matches and whose value parses wins.
      #        - regex: '.*'
      #          value: '0'
      #    type: DisplayString # Override the metric type, possible types are:
      #                        #   gauge:   An integer with type gauge.
      #                        #   counter: An integer with type counter.
      #                        #   OctetString: A bit string, rendered as 0xff34.
      #                        #   DateAndTime: An RFC 2579 DateAndTime byte sequence. If the device has no time zone data, UTC is used.
      #                        #   DisplayString: An ASCII or UTF-8 string.
      #                        #   PhysAddress48: A 48 bit MAC address, rendered as 00:01:02:03:04:ff.
      #                        #   Float: A 32 bit floating-point value with type gauge.
      #                        #   Double: A 64 bit floating-point value with type gauge.
      #                        #   InetAddressIPv4: An IPv4 address, rendered as 1.2.3.4.
      #                        #   InetAddressIPv6: An IPv6 address, rendered as 0102:0304:0506:0708:090A:0B0C:0D0E:0F10.
      #                        #   InetAddress: An InetAddress per RFC 4001. Must be preceded by an InetAddressType.
      #                        #   InetAddressMissingSize: An InetAddress that violates section 4.1 of RFC 4001 by
      #                        #       not having the size in the index. Must be preceded by an InetAddressType.
      #                        #   EnumAsInfo: An enum for which a single timeseries is created. Good for constant values.
      #                        #   EnumAsStateSet: An enum with a time series per state. Good for variable low-cardinality enums.
      #                        #   Bits: An RFC 2578 BITS construct, which produces a StateSet with a time series per bit.
