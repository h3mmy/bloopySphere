---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: thanos
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.bitnami.com/bitnami
      chart: thanos
      version: 12.1.0
      sourceRef:
        kind: HelmRepository
        name: bitnami-charts
        namespace: flux-system
      interval: 5m
  values:
    query:
      enabled: true
      replicaCount: 1
      replicaLabels:
        - replica
      dnsDiscovery:
        sidecarsService: prometheus-thanos-discovery
        sidecarsNamespace: monitoring
      ingress:
        enabled: true
        hostname: "thanos.${XYZ_DOMAIN}"
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          hajimari.io/instance: "bloop-quarky"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Thanos"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-rfc1918@kubernetescrd"
        hosts:
          - host: &host "thanos.${XYZ_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
            secretName: "tls.thanos"

    queryFrontend:
      enabled: false

    bucketweb:
      enabled: true
      # replicaCount: 2
      # podAntiAffinityPreset: hard
      ingress:
        enabled: true
        hostname: &hostbweb "thanos-bucketweb.${XYZ_DOMAIN}"
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/service.serversscheme: h2c
          traefik.ingress.kubernetes.io/router.middlewares: networking-rfc1918@kubernetescrd
        tls: true
        extraTls:
          - hosts:
              - *hostbweb
            secretName: tls.thanos-bucketweb

    compactor:
      enabled: true
      ingress:
        enabled: true
        hostname: &hostcompact "thanos-compactor.${XYZ_DOMAIN}"
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/service.serversscheme: h2c
          traefik.ingress.kubernetes.io/router.middlewares: networking-rfc1918@kubernetescrd
        tls: true
        extraTls:
          - hosts:
              - *hostcompact
            secretName: tls.thanos-compactor

      persistence:
        enabled: false

    storegateway:
      enabled: true
      ingress:
        enabled: true
        hostname: &hostgateway "thanos-storegateway.${XYZ_DOMAIN}"
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/service.serversscheme: h2c
          traefik.ingress.kubernetes.io/router.middlewares: networking-rfc1918@kubernetescrd
        tls: true
        extraTls:
          - hosts:
              - *hostgateway
            secretName: tls.thanos-storegateway
      persistence:
        enabled: true
        size: 20Gi

    ruler:
      enabled: false
      # replicaCount: 3
      # podAntiAffinityPreset: hard
      # dnsDiscovery:
      #   enabled: true
      # alertmanagers:
      #   - http://kube-prometheus-stack-alertmanager.monitoring:9093
      # clusterName: ${CLUSTER_NAME}
      # extraFlags:
      #   - "--web.prefix-header=X-Forwarded-Prefix"
      # config: |-
      #   groups:
      #     - name: "PrometheusWatcher"
      #       rules:
      #         - alert: "PrometheusDown"
      #           expr: absent(up{job="kube-prometheus-stack-prometheus"})
      # ingress:
      #   enabled: true
      #   hostname: &hostruler "thanos-ruler.${XYZ_DOMAIN}"
      #   ingressClassName: traefik
      #   annotations:
      #     cert-manager.io/cluster-issuer: letsencrypt-production
      #     traefik.ingress.kubernetes.io/service.serversscheme: h2c
      #     traefik.ingress.kubernetes.io/router.middlewares: networking-rfc1918@kubernetescrd
      #   tls: true
      #   extraTls:
      #     - hosts:
      #         - *hostruler
      #       secretName: tls.thanos-ruler
      # persistence:
      #   enabled: true
      #   storageClass: "ceph-block"
      #   size: 250Mi

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

    objstoreConfig:
      type: s3
      config:
        bucket: thanos
        endpoint: "minio.storage.svc.cluster.local:9000"
        access_key: "${THANOS_S3_ACCESS_KEY}"
        secret_key: "${THANOS_S3_SECRET_KEY}"
        insecure: true
