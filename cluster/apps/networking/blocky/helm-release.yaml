---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app blocky
  namespace: networking
spec:
  interval: 11m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s.github.io/helm-charts/
      chart: app-template
      version: 1.3.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system

  install:
    crds: CreateReplace
    remediation:
      retries: 5
  upgrade:
    crds: CreateReplace
    remediation:
      remediateLastFailure: true
      retries: 7

  dependsOn:
    - name: blocky-redis
      namespace: networking

  # valuesFrom:
  #   - name: blocky-config-values
  #     kind: ConfigMap
  #     valuesKey: config
  #     targetPath: config
  #     optional: false

  values:
    priorityClassName: network-cluster-critical

    image:
      repository: ghcr.io/0xerr0r/blocky
      tag: v0.20

    controller:
      enabled: true
      type: deployment
      strategy: RollingUpdate
      replicas: 3

    env:
      TZ: "${TZ}"

    service:
      main:
        enabled: true
        # type: LoadBalancer
        # ipFamilyPolicy: PreferDualStack
        # ipFamilies:
        #   - "IPv4"
        #   - "IPv6"
        # annotations:
        #   metallb.universe.tf/loadBalancerIPs: &lbs "${LB_V4_BLOCKY}, ${SVC_BLOCKY_ADDR_V6}"
        #   metallb.universe.tf/allow-shared-ip: *app
        ports:
          http:
            port: 4000
      dns:
        enabled: true
        type: LoadBalancer
        # v1.24 will have loadBalancerIPs
        # see https://github.com/kubernetes/enhancements/pull/1992
        ports:
          dns-tcp:
            enabled: true
            port: 53
            protocol: TCP
            targetPort: 53
          dns-tls:
            enabled: true
            port: 853
            protocol: TCP
            targetPort: 853
          dns-https:
            enabled: true
            port: 443
            protocol: TCP
            targetPort: 443
          dns-udp:
            enabled: true
            port: 53
            protocol: UDP
            targetPort: 53
        externalTrafficPolicy: Local
        loadBalancerIPs:
          - ${LB_V4_BLOCKY}
          - ${SVC_BLOCKY_ADDR_V6}
        ipFamilyPolicy: PreferDualStack
        ipFamilies:
          - "IPv4"
          - "IPv6"
        annotations:
          metallb.universe.tf/loadBalancerIPs: &lbs "${LB_V4_BLOCKY}, ${SVC_BLOCKY_ADDR_V6}"
          metallb.universe.tf/allow-shared-ip: *app

    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          cert-manager.io/ip-sans: "${SVC_BLOCKY_ADDR_V4}, ${SVC_BLOCKY_ADDR_V6}"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure, dns-tls"
          traefik.ingress.kubernetes.io/router.middlewares: networking-rfc1918@kubernetescrd

        hosts:
          - host: &host blocky.${XYZ_DOMAIN}
            paths:
              - path: /

        tls:
          - secretName: tls.blocky
            hosts:
              - *host
              - dns.${XYZ_DOMAIN}
              - "*.dns.${XYZ_DOMAIN}"

    serviceMonitor:
      main:
        enabled: true
        serviceName: *app
        endpoints:
          - interval: 30s
            path: /metrics
            port: http
            scrapeTimeout: 10s

    podAnnotations:
      configmap.reloader.stakater.com/reload: blocky-config,blocky-whitelist
      secret.reloader.stakater.com/reload: tls.blocky
      # linkerd.io/inject: enabled

    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 80
            preference:
              matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - i386
                    - i686
                    - x86
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - blocky
              topologyKey: kubernetes.io/hostname

    tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"

    persistence:
      config:
        enabled: true
        type: configMap
        name: &config blocky-config
        mountPath: /app/config.yml
        subPath: config.yml
      whitelists:
        enabled: true
        mountPath: /app/whitelists
        type: custom
        volumeSpec:
          configMap:
            name: blocky-whitelist
      certs:
        enabled: true
        type: secret
        name: tls.blocky

    probes:
      startup:
        spec:
          initialDelaySeconds: 30

    resources:
      requests:
        memory: 200Mi
        cpu: 200m
      limits:
        memory: 950Mi
        cpu: 1500m

    configMaps:
      config:
        enabled: true
        data:
          config.yml: |-
            upstream:
              default:
                - tcp+udp:1.1.1.1
                - tcp+udp:[2606:4700:4700::1111]
                # re-enable after fixing ipv6 incident
                - tcp-tls:1dot1dot1dot1.cloudflare-dns.com
                - tcp-tls:one.one.one.one
                - https://cloudflare-dns.com/dns-query
            upstreamTimeout: 5
            bootstrapDns: tcp+udp:1.1.1.1:53
            conditional:
              mapping:
                # local: tcp+udp:kube-dns.svc
                unifi: tcp+udp:${LOCAL_GATEWAY_MAIN}
                ${XYZ_DOMAIN}: tcp+udp:${LB_V4_K8S_GATEWAY},tcp+udp:${LB_V6_K8S_GATEWAY}
                ${DOMAIN_BIG_BLOOP}: tcp+udp:${LOCAL_GATEWAY_BIG_BLOOP}
                ${DOMAIN_SMALL_BLOOP}: tcp+udp:${LOCAL_GATEWAY_SMALL_BLOOP}
                ${DOMAIN_CORE_BLOOP}: tcp+udp:${LOCAL_GATEWAY_CORE_BLOOP}
                status.${XYZ_DOMAIN}: tcp+udp:1.1.1.1
                # DoH canary domains. Forward to pihole for NODATA or NXDOMAIN
                use-application-dns.net: tcp+udp:10.1.0.9
                mask.icloud.com: tcp+udp:10.1.0.9
                mask-h2.icloud.com: tcp+udp:10.1.0.9
            customDNS:
              mapping:
                ${CLASSIC_DOMAIN}: ${NAS_ADDRESS},${LB_V4_TRAEFIK_CLASSIC}
                ${SECRET_DOMAIN}: ${LB_V4_TRAEFIK},${LB_V6_TRAEFIK}
                ${TGR_DOMAIN}: ${LB_V4_TRAEFIK},${LB_V6_TRAEFIK}
                emqx.${XYZ_DOMAIN}: ${LB_V4_TRAEFIK},${LB_V6_TRAEFIK}
                home-assistant.${XYZ_DOMAIN}: ${LB_V4_TRAEFIK},${LB_V6_TRAEFIK}
                mqtt.${XYZ_DOMAIN}: ${LB_V4_TRAEFIK},${LB_V6_TRAEFIK}
                wss.${XYZ_DOMAIN}: ${LB_V4_TRAEFIK},${LB_V6_TRAEFIK}
                dns.${XYZ_DOMAIN}: ${SVC_BLOCKY_ADDR_V4},${SVC_BLOCKY_ADDR_V6}
            blocking:
              blockType: zeroIp
              # failStartOnListError: true
              startStrategy: failOnError
              blackLists:
                ads:
                  - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
                  - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
                  # - http://sysctl.org/cameleon/hosts
                  - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
                special:
                  - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn/hosts
                doh:
                  - https://raw.githubusercontent.com/Sekhan/TheGreatWall/master/TheGreatWall.txt
                  - https://gist.githubusercontent.com/ckuethe/f71185f604be9cde370e702aa179fc2e/raw/53fe52046836ac3009e9505b7b8b8b5de42d84e3/doh-blocklist.txt
                none:
              whiteLists:
                ads:
                  - /app/whitelists/whitelist.txt
                  - https://raw.githubusercontent.com/anudeepND/whitelist/master/domains/whitelist.txt
                doh:
                  - https://raw.githubusercontent.com/anudeepND/whitelist/master/domains/whitelist.txt
              clientGroupsBlock:
                default:
                  - ads
                ${LOCAL_GATEWAY_BIG_BLOOP}/16:
                  - ads
                  - doh
                ${LOCAL_GATEWAY_SMALL_BLOOP}/24:
                  - ads
                  - special
                  - doh

            clientLookup:
              upstream: tcp+udp:${LOCAL_GATEWAY_MAIN}
              # optional: some routers return multiple names for client (host name and user defined name). Define which single name should be used.
              # Example: take second name if present, if not take first name
              singleNameOrder:
                - 2
                - 1
              # optional: custom mapping of client name to IP addresses. Useful if reverse DNS does not work properly or just to have custom client names.
              # clients:
              #   laptop:
              #     - 192.168.178.29
            caching:
              prefetching: true
            redis:
              address: blocky-redis-master:6379
              password: ${BLOCKY_REDIS_PASSWORD}
              database: 2
              required: true
            prometheus:
              enable: true
              path: /metrics
            httpPort: 4000
            httpsPort: 443
            tlsPort: 853
            certFile: /certs/tls.crt
            keyFile: /certs/tls.key
            logLevel: info
            # optional: write query information (question, answer, client, duration etc.) to daily csv file
            queryLog:
              # optional one of: mysql, postgresql, csv, csv-client. If empty, log to console
              type: postgresql
              # directory (should be mounted as volume in docker) for csv, db connection string for mysql/postgresql
              #mysql target: db_user:db_password@tcp(db_host_or_ip:3306)/db_name?charset=utf8mb4&parseTime=True&loc=Local
              target: "postgres://postgres:${BLOCKY_KUBEGRES_PASSWORD}@blocky-postgres:5432/${BLOCKY_QUERY_DB_NAME}"
              # if > 0, deletes log files which are older than ... days
              logRetentionDays: 7
              # optional: Max attempts to create specific query log writer, default: 3
              creationAttempts: 1
              # optional: Time between the creation attempts, default: 2s
              creationCooldown: 2s
            # queryLog:
            #   type: mysql
            #   target: ${MARIADB_BLOCKY_USER}:${MARIADB_BLOCKY_PASSWORD}@tcp(${MARIADB_ADDRESS}:3306)/${MARIADB_BLOCKY_DATABASE}?charset=utf8mb4&parseTime=True&loc=Local
            #   logRetentionDays: 7
