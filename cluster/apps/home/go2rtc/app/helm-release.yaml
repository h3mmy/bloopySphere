---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app go2rtc
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      go2rtc:
        replicas: 1
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/alexxit/go2rtc
              tag: 1.9.10@sha256:95ce2ab22f2c7d8eb4dae42e0856b8480daf22c7c632f4a0489d442caf2df158
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &port 80
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 512Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
    service:
      app:
        controller: *app
        type: LoadBalancer
        ipFamilyPolicy: PreferDualStack
        ipFamilies:
          - "IPv4"
          - "IPv6"
        externalTrafficPolicy: Local
        annotations:
          external-dns.alpha.kubernetes.io/hostname: &host go2rtc-streams.${XYZ_DOMAIN}
          metallb.io/loadBalancerIPs: &lbs "${LB_V4_GO2RTC}, ${LB_V6_GO2RTC}"
        ports:
          http:
            primary: true
            port: *port
          rtsp:
            port: 554
          webrtc-tcp:
            port: 8555
            protocol: TCP
          webrtc-udp:
            port: 8555
            protocol: UDP
    ingress:
      app:
        className: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          cert-manager.io/ip-sans: *lbs
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: networking-rfc1918@kubernetescrd
        hosts:
          - host: *host
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: tls.go2rtc
    route:
      app:
        hostnames: ["{{ .Release.Name }}.${XYZ_DOMAIN}"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port
    persistence:
      config-file:
        type: configMap
        name: go2rtc-configmap
        globalMounts:
          - path: /config/go2rtc.yaml
            subPath: go2rtc.yaml
            readOnly: true
      tls-crt:
        name: tls.go2rtc
        type: secret
        globalMounts:
          - subPath: tls.crt
            path: /config/ssl/go2rtc.crt
      tls-key:
        name: tls.go2rtc
        type: secret
        globalMounts:
          - subPath: tls.key
            path: /config/ssl/go2rtc.key
